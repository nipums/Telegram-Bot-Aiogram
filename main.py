from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from confi import TOKEN, BASE
from keyboard import menu_1, MI
import requests
from bs4 import BeautifulSoup
import data_base
import psycopg2


bot = Bot(TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


async def on_startup(_):
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω >>> –û–Ω–ª–∞–π–Ω")


@dp.message_handler(commands=["start", "help"])
async def welcome(message: types.Message):
    sticker = open("image/Hello2.webp", "rb")
    await message.answer_sticker(sticker)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ?", reply_markup=menu_1)
    data_base.start(message)
    await message.answer("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î")


@dp.message_handler(commands=["delete"])
async def delete(message: types.Message):
    data_base.delete(message)
    await message.answer("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î")


@dp.message_handler()
async def echo(message: types.Message):
    if message.text == "–ú–æ–π ID üïµ":
        await message.answer("–í–∞—à ID:")
        await message.answer(message.chat.id)
    elif message.text == "–ü–æ–≥–æ–¥–∞ üåß":
        url = 'https://weather.com/ru-RU/weather/today/l/5ad65038b8ca5303fbb202f94de129249870d2b8c1f8cba70e77231ed1007997'
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'lxml')
        quotes = soup.find_all('span', class_="CurrentConditions--tempValue--3a50n")

        for quote in quotes:
            await message.answer("–í –≥–æ—Ä–æ–¥–µ –°–∏–±–∞–π:")
            await message.answer(quote.text)
    elif message.text == "–ë–î üòÄ":
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:")
        connect = psycopg2.connect(BASE, sslmode="require")
        cursor = connect.cursor()
        people_id_2 = message.chat.id
        cursor.execute(f"SELECT id, name, last_name FROM user_id WHERE id = {people_id_2}")
        data = cursor.fetchall()
        if not data:
            await message.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤–∞—Å –Ω–µ—Ç –≤ –ë–î")
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start")
        else:
            for data1 in data:
                text1 = "<strong>ID:</strong> " + str(data1[0])
                text2 = "<strong>–ò–º—è:</strong> " + str(data1[1])
                text3 = "<strong>–§–∞–º–∏–ª–∏—è:</strong> " + str(data1[2])
                await message.answer(text1)
                await message.answer(text2)
                await message.answer(text3)
    elif message.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç üìà":
        await message.answer("–í–∞–ª—é—Ç–∞:", reply_markup=MI)
    elif message.text == "–î–æ–ª–ª–∞—Ä $":
        url2 = 'https://quote.rbc.ru/ticker/59111'
        response2 = requests.get(url2)
        soup2 = BeautifulSoup(response2.text, 'lxml')
        quotes2 = soup2.find_all('span', class_="chart__info__sum")
        for i in quotes2:
            await message.answer(i.text)
    elif message.text == "–ï–≤—Ä–æ ‚Ç¨":
        url3 = 'https://www.tinkoff.ru/invest/currencies/EURRUB/'
        response3 = requests.get(url3)
        soup3 = BeautifulSoup(response3.text, 'lxml')
        quotes3 = soup3.find_all('div', class_="SecurityInvitingScreen__price_FSP8P")
        for k in quotes3:
            await message.answer(k.text)
    elif message.text == "–ù–∞–∑–∞–¥ ‚¨Ö":
        await message.answer("–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ?", reply_markup=menu_1)
    elif message.text == "–ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å ü¶†":
        url4 = 'https://—Å—Ç–æ–ø–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å.—Ä—Ñ/'
        response4 = requests.get(url4)
        soup4 = BeautifulSoup(response4.text, 'lxml')
        quotes4 = soup4.find_all('div', class_="cv-countdown__item-value _accent-green")
        await message.answer("–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
        for u in quotes4:
            await message.answer(u.text)
    else:
        await message.answer("–û—à–∏–±–∫–∞!")

executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
